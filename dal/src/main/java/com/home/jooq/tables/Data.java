/*
 * This file is generated by jOOQ.
*/
package com.home.jooq.tables;


import com.home.jooq.Indexes;
import com.home.jooq.Keys;
import com.home.jooq.Public;
import com.home.jooq.tables.records.DataRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1",
        "schema version:3"
    },
    date = "2018-07-20T18:48:07.188Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Data extends TableImpl<DataRecord> {

    private static final long serialVersionUID = 1987030961;

    /**
     * The reference instance of <code>public.data</code>
     */
    public static final Data DATA = new Data();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataRecord> getRecordType() {
        return DataRecord.class;
    }

    /**
     * The column <code>public.data.id</code>.
     */
    public final TableField<DataRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('seq_data_id'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.data.content</code>.
     */
    public final TableField<DataRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.data</code> table reference
     */
    public Data() {
        this(DSL.name("data"), null);
    }

    /**
     * Create an aliased <code>public.data</code> table reference
     */
    public Data(String alias) {
        this(DSL.name(alias), DATA);
    }

    /**
     * Create an aliased <code>public.data</code> table reference
     */
    public Data(Name alias) {
        this(alias, DATA);
    }

    private Data(Name alias, Table<DataRecord> aliased) {
        this(alias, aliased, null);
    }

    private Data(Name alias, Table<DataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATA_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DataRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DataRecord> getPrimaryKey() {
        return Keys.DATA_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DataRecord>> getKeys() {
        return Arrays.<UniqueKey<DataRecord>>asList(Keys.DATA_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Data as(String alias) {
        return new Data(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Data as(Name alias) {
        return new Data(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Data rename(String name) {
        return new Data(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Data rename(Name name) {
        return new Data(name, null);
    }
}
